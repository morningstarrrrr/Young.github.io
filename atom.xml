<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Antique</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-05T06:54:05.984Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Young</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++</title>
    <link href="http://example.com/2021/08/05/c/"/>
    <id>http://example.com/2021/08/05/c/</id>
    <published>2021-08-05T02:13:55.000Z</published>
    <updated>2021-08-05T06:54:05.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><hr><h3 id="c和c-的区别"><a href="#c和c-的区别" class="headerlink" title="c和c++的区别"></a>c和c++的区别</h3><ul><li>c是面向过程</li><li>c++是面向对象</li></ul><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><ul><li><p>类是抽象的概念，用于创造对象（比如<strong>狗</strong>这个类）</p></li><li><p>对象是类的实例，是类的具体化，是客观世界真实存在的实体（狗可以分成吉娃娃、萨摩耶等）</p><mark class="hl-label red">面向对象的编程：OOP</mark> </li></ul><p><strong>类实际上就是将数据和操作数据的方法封装合并在一起</strong></p><h3 id="c-泛型编程"><a href="#c-泛型编程" class="headerlink" title="c++泛型编程"></a>c++泛型编程</h3><p>​    强调独立于特定数据类型。对语言进行扩展，实现只编写一个函数，即可以运用于各种实际类型。</p><h3 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li>写源代码</li><li>编译</li><li>经过编译形成目标文件（object）</li><li>链接程序</li><li>经过链接形成可执行文件</li></ol><h2 id="开始学习C"><a href="#开始学习C" class="headerlink" title="开始学习C++"></a>开始学习C++</h2><hr><h3 id="进入C"><a href="#进入C" class="headerlink" title="进入C++"></a>进入C++</h3><h4 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Come up and C++ me some time.&quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;You won&#x27;t regret it!&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin.<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>预处理器编译指令#include</li><li>函数头：int main（）</li><li>编译指令：using namespace</li></ul><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">statements</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几行代码构成函数定义。第一行叫做函数头，中间的部分叫做函数体。每条完整的指令都称为语句。<font color="red">在C++中，所有的语句都以分号结束，不能省略。</font>最后一条语句叫做返回语句，它结束该函数。</p><p>main函数的函数头描述的是main（）和操作系统之间的接口。</p><p>如果编译器到达main（）函数末尾时没有遇到返回语句，则认为main（）函数以如下语句结尾：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="C-注释"><a href="#C-注释" class="headerlink" title="C++注释"></a>C++注释</h4><p>C++注释以//开头，到行尾结束</p><p>C++也能识别C注释，C注释包括在符号 /* 和 */ 之间:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> <span class="comment">/* a C-style comment */</span></span></span><br></pre></td></tr></table></figure><h4 id="C-预处理器和iostream文件"><a href="#C-预处理器和iostream文件" class="headerlink" title="C++预处理器和iostream文件"></a>C++预处理器和iostream文件</h4><p>如果要使用C++输入<strong>或</strong>输出工具，使用以下两行代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><p>使用预处理器使程序在进行主编译之前对源文件进行处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><p>该编译指令导致预处理器将iostream文件的内容添加到程序中。这样做的<font color="red">目的</font>是：iostream中有多个定义，使用cin和cout来输入和输出信息需要用到这些定义。#include编译指令导致iostream文件的内容隋源代码文件的内容一起被发送给编译器。<font color="red">实际上，原始文件没有被修改，而是将源代码文件和iostream组合成一个复合文件，编译的下一阶段将使用该文件。</font></p><h4 id="头文件名"><a href="#头文件名" class="headerlink" title="头文件名"></a>头文件名</h4><p>像iostream这样的文件叫做包含文件（include file）。C语言的传统是，头文件使用扩展名.h。而在C++去掉了扩展名h（但仍可以使用这种文件），并在文件名前面加上前缀c。比如C++版本的math.h为cmath</p><h4 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h4><p>如果使用iostream而不是iostream.h，则应使用下面的名称空间编译指令来使iostream中的定义对程序可用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><p>叫做using编译指令。</p><p>名称空间支持目的是在编写大型程序以及多个厂商现有的代码组合起来的程序时更容易，有助于组织程序。在面对多个厂商的不同封装产品时，使用名称空间可以区分不同的版本。</p><mark class="hl-label pink">可以把std的部分看成一个公司名称</mark> <p>按照这种方式，类、函数和变量是C++编译器的标准组件，它们都被放置在名称空间std中（当且仅当头文件没有扩展名h时）。这意味着在iostream中定义的用于输出的cout变量实际上是std::out，而endl实际上是std::endl。因此可以省略编译指令using，用如下方式进行编码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::cout&lt;&lt;<span class="string">&quot;Come up and C++ me some time.&quot;</span>;</span><br><span class="line">std::cout&lt;&lt;std::endl;</span><br></pre></td></tr></table></figure><p>更好的方法是，只使所需的名称可用，通过using声明来实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br></pre></td></tr></table></figure><h4 id="使用cout进行C-输出"><a href="#使用cout进行C-输出" class="headerlink" title="使用cout进行C++输出"></a>使用cout进行C++输出</h4><p>&lt;&lt;符号表示该语句将把这个字符串发送给cout;该符号指出了信息流动的路径。</p><p>从C++概念上来看，输出是从程序流出的一系列字符。cout对象表示这种流，cout的对象属性包括一个插入运算符（&lt;&lt;），它可以将其右侧的信息插入到流中。</p><ol><li><p>控制符endl</p><p>表示重启一行。诸如endl等对于cout来说有特殊含义的特殊符号被称为控制符。和cout一样，endl也是在头文件iostream中定义的，且位于名称期间std中。</p></li><li><p>换行符</p><p>另一种换行的旧式方法：C语言符号\n:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;What&#x27;s next?\n&quot;</span>;</span><br></pre></td></tr></table></figure><p><font color="red">两者之间的区别：</font>endl确保程序继续运行前刷新输出（将其立刻显示在屏幕上）；而\n不能保证。</p></li></ol><h3 id="C-语句"><a href="#C-语句" class="headerlink" title="C++语句"></a>C++语句</h3>]]></content>
    
    
    <summary type="html">根据《C++ Primer Plus》学习而写</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2021/08/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/08/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-08-04T09:54:42.000Z</published>
    <updated>2021-08-05T10:39:20.205Z</updated>
    
    <content type="html"><![CDATA[<center>数据结构</center><hr><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a><center>绪论</center></h2><h3 id="🎈数据结构的研究内容"><a href="#🎈数据结构的研究内容" class="headerlink" title="🎈数据结构的研究内容"></a>🎈数据结构的研究内容</h3><p>计算机解决问题的步骤：</p><ul><li>将问题抽象为<font color="red">数学模型</font></li><li>设计算法</li><li>编程、调试、运行</li></ul><p>早期，计算机应用于数值计算：</p><ul><li>分析问题，找出对象以及对象之间的关系</li><li>建立数学方程</li><li>求解</li></ul><p>随着计算机应用领域的扩展，越来越多被用于非数值计算：</p><ul><li>线性表</li><li>树</li><li>图</li></ul><p>以上都是“非数值计算”的程序设计问题</p><blockquote><p>综上所述，数据结构是一门研究<font color="red">非数值计算的</font>程序设计中计算机的<font color="red">操作对象</font>以及他们之间的<font color="red">关系</font>和<font color="red">操作</font>的学科。</p></blockquote><h3 id="🎈基本概念和术语"><a href="#🎈基本概念和术语" class="headerlink" title="🎈基本概念和术语"></a>🎈基本概念和术语</h3><h4 id="数据、数据元素、数据项和数据对象"><a href="#数据、数据元素、数据项和数据对象" class="headerlink" title="数据、数据元素、数据项和数据对象"></a>数据、数据元素、数据项和数据对象</h4><ol><li><p>数据(Data)：是描述客观事物的符号，是计算机中可以操作的对象，是能被输入计算机且能被计算机处理的各种符号的集合。</p><p>包括：</p></li></ol><ul><li>数值型数据：整数、实数等</li><li>非数值型数据：文字、图像、图形、声音等</li></ul><ol start="2"><li>数据元素(Data element)：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理，也称为元素、记录、结点或顶点。</li><li>数据项：构成数据元素的不可分割的最小单位</li></ol><blockquote><p><font color="red">以上三者之间的关系：</font>数据&gt;数据元素&gt;数据项</p></blockquote><ol start="4"><li><p>数据对象(Data Object)：性质相同的数据元素的结合，是数据的一个子集。</p><p>数据元素和数据对象与数据的关系的区别：</p></li></ol><ul><li>数据元素是集合的个体</li><li>数据对象是集合的子集</li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p>数据元素互相之间的关系称为<font color="red">结构</font></p></li><li><p>是指相互之间存在一种或多种特定关系的数据元素集合</p></li><li><p><font color="red">包含以下三方面内容：</font></p><ol><li>数据元素之间的逻辑关系，也称为<font color="red">逻辑结构</font></li><li>数据元素及其关系在计算机内存中的表示（又称为映像）称为数据的<font color="red">物理结构</font>或数据的<font color="red">存储结构</font></li><li>数据的<font color="red">运算和实现，</font>即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现</li></ol></li><li><p>数据结构的两个层次：</p><ol><li><p><font color="red">逻辑结构：</font>是指数据对象中数据元素之间的互相关系</p><p><strong>逻辑结构的种类：</strong></p><p>划分方法一：</p><ol><li><font color="red">线性结构：</font>有且仅有一个开始和终端结点，并且所有结点都最多只有一个直接前驱和一个直接后继。</li><li><font color="red">非线性结构：</font>一个结点可能有多个直接前驱和直接后继。</li></ol><p>划分方法二：</p><ol><li><font color="red">集合结构：</font>其中的数据元素只有<font color="red">只属于一个集合</font>的关系</li><li><font color="red">线性结构：</font>数据元素存在<font color="red">一对一</font>的线性关系</li><li><font color="red">树形结构：</font>数据元素存在<font color="red">一对多</font>的线性关系</li><li><font color="red">图状/网状结构：</font>数据元素存在<font color="red">多对多</font>的线性关系</li></ol></li><li><p><font color="red">物理结构（存储结构）：</font>是指数据的逻辑结构在计算机中的存储形式</p><p><strong>存储结构的种类：</strong></p><p>​    <font color="red">四种基本的存储结构：</font></p><p>​    1.<font color="red">顺序存储结构：</font>用一组连续的存储单元一次存储数据元素，数据元素之间的逻辑关系用存储位置表示</p><p>​    2.<font color="red">链式存储结构：</font>用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示</p><p>​    3.<font color="red">索引存储结构：</font>在存储结点信息的同时，还建立附加的索引表（其中的每一项称为索引项）</p><p>​    4.<font color="red">散列存储结构：</font>根据结点的关键字直接计算出该结点的存储地址</p><p><strong>逻辑结构和存储结构之间的关系：</strong></p><ul><li>存储结构是逻辑关系的映像与元素本身的映像</li><li>逻辑结构是数据结构的抽象，存储结构是数据结构的实现</li><li>两者综合起来建立了数据元素之间的结构关系</li></ul></li></ol></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>是指一组性质相同的值的集合及定义在此集合上的一些操作的总称</p><p>在C语言中，按照取值的不同，可以分为两类：</p><ul><li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等</li><li>结构类型：有若干个类型集合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的</li></ul><mark class="hl-label red">抽象是指抽取出事物具有的普遍性的本质。</mark> <h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><p>通过对已有的数据类型进行抽象得到。</p><p>抽象数据类型（Abstract Data Type, ADT）：是指一个数学模型及定义在该模型上的一组操作。</p><p>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</p><p>抽象数据类型的标准格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ADT 抽象数据类型名</span><br><span class="line">Data</span><br><span class="line">数据元素之间逻辑关系的定义</span><br><span class="line">Operation</span><br><span class="line">操作1</span><br><span class="line">初始条件</span><br><span class="line">操作结果描述</span><br><span class="line">操作2</span><br><span class="line">...</span><br><span class="line">操作n</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><hr><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a><center>算法</center></h2><p><strong>数据额结构和算法的关系是相互依赖不可分割的。</strong></p><h3 id="🎈算法定义"><a href="#🎈算法定义" class="headerlink" title="🎈算法定义"></a>🎈算法定义</h3><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p><h3 id="🎈算法的特性"><a href="#🎈算法的特性" class="headerlink" title="🎈算法的特性"></a>🎈算法的特性</h3><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><ul><li>算法具有零个或多个输入</li><li>算法至少有一个或多个输出，输出的形式可以是打印输出，也可以是返回一个或多个值等</li></ul><h4 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h4><p>算法在执行有限的步骤之后，自动结束而会出现无限循环，并且每一个步骤在可接受的时间内完成。</p><h4 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h4><p>算法的每一步骤都具有确定的含义，不会出现二义性。</p><h4 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h4><p>算法的每一步都必须是可行的，也就是说，每一步都能通过执行有限次数完成。</p><h3 id="🎈算法设计的要求"><a href="#🎈算法设计的要求" class="headerlink" title="🎈算法设计的要求"></a>🎈算法设计的要求</h3><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p><p>可以分为四个层次：</p><ol><li>算法程序没有语法错误</li><li>算法程序对于合法的输入数据能够产生满足要求的输出结果。</li><li>算法程序对于非法的输入数据能够得出满足规格说明的结果。</li><li>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</li></ol><p>一般情况下，把层次3作为一个算法是否正确的标准。同时，一个好的算法还要容易理解。</p><h4 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h4><p>算法设计的另一目的是为了便于阅读、理解和交流。</p><h4 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h4><p>当数据输入不合法时，算法也能做出相关处理，而不是产生异常或莫名奇妙的结果。</p><h4 id="时间效率高和存储量低"><a href="#时间效率高和存储量低" class="headerlink" title="时间效率高和存储量低"></a>时间效率高和存储量低</h4><p>设计算法应该尽量满足时间效率高和存储量低的需求。</p><h3 id="🎈算法效率的度量方法"><a href="#🎈算法效率的度量方法" class="headerlink" title="🎈算法效率的度量方法"></a>🎈算法效率的度量方法</h3><h4 id="事后统计方法"><a href="#事后统计方法" class="headerlink" title="事后统计方法"></a>事后统计方法</h4><p>这种方式主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。但是存在缺陷，不予采纳。</p><h4 id="事前分析估算方法"><a href="#事前分析估算方法" class="headerlink" title="事前分析估算方法"></a>事前分析估算方法</h4><p>在计算机程序编制前，依据统计方法对算法进行估算。</p><p>程序在计算机上运行时所消耗的时间取决于下列因素：</p><ol><li>算法采用的策略、方法</li><li>编译产生的代码质量</li><li>问题的输入规模</li><li>机器指令执行的速度</li></ol><blockquote><p>抛开软件和硬件的因素，一个程序的运行时间，依赖于<strong>算法的好坏和问题的输入规模</strong>。问题输入规模是指输入量的多少。</p></blockquote><p><strong>在分析程序的运行时间时，最重要的是把程序看成是独立于程序设计语言的算法或一系列步骤。</strong></p><h3 id="🎈函数的渐近增长"><a href="#🎈函数的渐近增长" class="headerlink" title="🎈函数的渐近增长"></a>🎈函数的渐近增长</h3><blockquote><p>定义：给定两个函数f（n）和g（n），如果存在一个整数N，是的对于所有n&gt;N，f（n）总是比g（n）大，那么，我们说f（n）的增长渐近快于g（n）。</p></blockquote><p>结论：判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p><h3 id="🎈算法时间复杂度"><a href="#🎈算法时间复杂度" class="headerlink" title="🎈算法时间复杂度"></a>🎈算法时间复杂度</h3><h4 id="算法时间复杂度定义"><a href="#算法时间复杂度定义" class="headerlink" title="算法时间复杂度定义"></a>算法时间复杂度定义</h4><blockquote><p>在进行算法分析时，语句总的执行次数T（n）是关于问题规模n的函数，进而分析T（n）随n的变化情况并确定T（n）的数量级。算法的时间复杂度，也就是算法的时间量度，记作 T(n)=O(f(n)) 。它表示随问题规模n的增大，算法执行时间的增长率和f（n）的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f（n）是问题规模n的某个函数。</p></blockquote><p>这样用大写 O() 来体现算法时间复杂度的记法，称之为大O记法。</p><p>一般情况下，随着n的增大，T（n）增长最慢的算法为最优算法。</p><h4 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h4><ol><li>用常数1取代运行时间中的所有加法常数。</li><li>在修改后的运行次数函数中，只保留最高阶项</li><li>如果最高阶项存在且不是1，则去除与这个项相乘的常数</li><li>得到的结果就是大O阶</li></ol><h4 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h4><p>如果一个算法，无论n为多少，上面的两端代码执行的次数是不变的。这种与问题的大小无关（n的多少），执行时间恒定的算法，我们称之为具有O（1）的时间复杂度，又叫常数阶。</p><mark class="hl-label red">即执行次数恒定，不会随着n的变大而发生变化</mark> <h4 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h4><p>要确定某个算法的阶次，我们常常要确定某个特定语句或者某个语句集运行的次数。因此，我们要<strong>分析算法的复杂度，关键就是要分析循环结构的运行情况</strong>。</p><p>下面这段代码，它的循环的时间复杂度为O（n），因为循环体中的代码需要执行n次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 时间复杂度为O（1）的程序步骤序列 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(count &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">count = count * <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* 时间复杂度为O（1）的程序步骤序列 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有多少个2相乘后大于n，就会退出循环。由 2<sup>x</sup>=n 得到 x=log<sub>2</sub>n 。所以这个循环的时间复杂度为 O(log<sub>n</sub>) 。</p><h4 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; J++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 时间复杂度为O（1）的程序步骤序列 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的内循环的时间复杂度为O（n），而它的外循环是对于内部时间复杂度为O（n）的语句，再循环n次。所以它的时间复杂度为O（n<sup>2</sup>）。</p><p>如果外循环的循环次数改成了m，那么时间复杂度就变为O（m*n）。</p><p>总结得出，<font color="red">循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数</font>。</p><p>对于下面这个循环嵌套：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &lt; n; j++) <span class="comment">/* 注意int j = i 而不是0 */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 时间复杂度为O（1）的程序步骤序列 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当i=0时，内循环执行了n次，当i=1时，内循环执行了n-1次，……当i=n-1时，执行了1次。所以总执行次数为：</p><center>n+(n-1)+(n-2)+···+1=n(n+1)/2+n/2</center><p>用推导大O阶的方法，得出这段代码的时间复杂度为O（n<sup>2</sup>）。</p><h4 id="🎈常用的时间复杂度"><a href="#🎈常用的时间复杂度" class="headerlink" title="🎈常用的时间复杂度"></a>🎈常用的时间复杂度</h4><table><thead><tr><th align="center">执行次数函数</th><th align="center">阶</th><th align="center">非正式术语</th></tr></thead><tbody><tr><td align="center">12</td><td align="center">O（1）</td><td align="center">常数阶</td></tr><tr><td align="center">2n+3</td><td align="center">O（n）</td><td align="center">线性阶</td></tr><tr><td align="center">3n<sup>2</sup>+2n+1</td><td align="center">O（n<sup>2</sup>）</td><td align="center">平方阶</td></tr><tr><td align="center">5log<sub>2</sub>n+20</td><td align="center">O（logn）</td><td align="center">对数阶</td></tr><tr><td align="center">2n+3nlog<sub>2</sub>n+19</td><td align="center">O（nlogn）</td><td align="center">nlog<sub>2</sub>n阶</td></tr><tr><td align="center">6n<sup>3</sup>+2n<sup>2</sup>+3n+4</td><td align="center">O（n<sup>3</sup>）</td><td align="center">立方阶</td></tr><tr><td align="center">2<sup>n</sup></td><td align="center">O（2<sup>n</sup>）</td><td align="center">指数阶</td></tr></tbody></table><p>常用的时间复杂度所耗费的时间从小到大依次是：</p><blockquote><p>O（1）&lt;O（logn）&lt;O（nlogn）&lt;O（n<sup>2</sup>）&lt;O（n<sup>3</sup>）&lt;O（2<sup>n</sup>）&lt;O（n！）&lt;O（n<sup>n</sup>）</p></blockquote><h3 id="🎈最坏情况与平均情况"><a href="#🎈最坏情况与平均情况" class="headerlink" title="🎈最坏情况与平均情况"></a>🎈最坏情况与平均情况</h3><ul><li><strong>最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。在应用中，这是一种最重要的需求，通常，除非特别指定，我们提到的运行时间都是最坏情况的运行时间。</strong></li><li>平均运行时间是所有情况中最有意义的，因为它是期望的运行时间。（一般通过运行一定数量的实验数据后估算出来的）</li></ul><h3 id="🎈算法空间复杂度"><a href="#🎈算法空间复杂度" class="headerlink" title="🎈算法空间复杂度"></a>🎈算法空间复杂度</h3><p>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作： S(n) = O(f(n)) ，其中，n为问题的规模，f（n）为语句关于n所占存储空间的函数。</p><hr><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a><center>线性表</center></h2><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2>]]></content>
    
    
    <summary type="html">根据《大话数据结构》学习而写</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>阅读测试</title>
    <link href="http://example.com/2021/08/04/%E9%98%85%E8%AF%BB%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2021/08/04/%E9%98%85%E8%AF%BB%E6%B5%8B%E8%AF%95/</id>
    <published>2021-08-04T02:20:42.000Z</published>
    <updated>2021-08-04T02:24:15.878Z</updated>
    
    
    
    
    <category term="阅读" scheme="http://example.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>哲学</title>
    <link href="http://example.com/2021/08/03/%E5%93%B2%E5%AD%A6/"/>
    <id>http://example.com/2021/08/03/%E5%93%B2%E5%AD%A6/</id>
    <published>2021-08-03T15:01:50.000Z</published>
    <updated>2021-08-04T02:27:38.219Z</updated>
    
    <content type="html"><![CDATA[<p>哲学第一课</p><p>啊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哲学第一课&lt;/p&gt;
&lt;p&gt;啊&lt;/p&gt;
</summary>
      
    
    
    
    <category term="感悟" scheme="http://example.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>ttt</title>
    <link href="http://example.com/2021/08/02/ttt/"/>
    <id>http://example.com/2021/08/02/ttt/</id>
    <published>2021-08-02T07:24:52.000Z</published>
    <updated>2021-08-04T01:53:50.701Z</updated>
    
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>感悟</title>
    <link href="http://example.com/2021/08/02/%E6%84%9F%E6%82%9F/"/>
    <id>http://example.com/2021/08/02/%E6%84%9F%E6%82%9F/</id>
    <published>2021-08-02T06:02:02.000Z</published>
    <updated>2021-08-04T09:13:37.949Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>事情的结果是这样子的</strong></p><p><code>Hello world</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printfasasdasd</span><br><span class="line">asdda</span><br></pre></td></tr></table></figure><hr><blockquote><p>但是</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;strong&gt;事情的结果是这样子的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hello world&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="哲学" scheme="http://example.com/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Everyday Routine</title>
    <link href="http://example.com/2021/08/02/ER/"/>
    <id>http://example.com/2021/08/02/ER/</id>
    <published>2021-08-02T05:39:47.000Z</published>
    <updated>2021-08-04T14:43:40.339Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>你想要什么：</strong></p><p>⛹️‍♂️健康的身体</p><p>📖多读书充实自己</p><p>🎵有兴趣爱好能够娱乐自己</p><p>🎁能赚到足够的钱能买自己想要的东西</p><p>🗄有充足的知识能够胜任自己感兴趣的工作</p></li><li><p><strong>想要成为什么样的人：</strong></p><p>平静，任何时候都不慌乱，理性面对一切事情</p><p>责任，不逃避要发生的事情</p><p>外向，关心他人，吸引他人</p></li><li><p><strong>要怎么做：</strong></p><p>摆脱拖延症</p><p>摆脱即时娱乐</p><p>不做没有意义的事情，即使要玩游戏也是和朋友一起玩</p><p>抽时间多读书</p><p>养成良好的作息习惯</p></li><li><p><strong>如果选择即时娱乐会怎么样：</strong></p><p>到毕业的时候，仍然做什么事情都半吊子，既没有做好考研的准备也没有做好工作的准备，仍然会时刻处于焦虑之中，自我怀疑</p></li><li><p>成功的道路并不像想象得那么拥挤，因为在人生的马拉松长路上，绝大部分人跑不到一半就主动退下来了。到后来，剩下的少数人不是嫌竞争对手太多，而是发愁怎样找一个同伴陪自己一同跑下去。因此，教育是一辈子的事情，笑到最后的人是一辈子接受教育的人。回过头来看，一些过去比我们读书更优秀，在起跑线上抢到了更好位置的人，早已放弃了人生的马拉松，我们能够跑得更远，仅仅是因为我们还在跑，如此而已。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;你想要什么：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;⛹️‍♂️健康的身体&lt;/p&gt;
&lt;p&gt;📖多读书充实自己&lt;/p&gt;
&lt;p&gt;🎵有兴趣爱好能够娱乐自己&lt;/p&gt;
&lt;p&gt;🎁能赚到足够的钱能买自己想要的东西&lt;/p&gt;
&lt;p&gt;🗄有充足的知识能够胜任自己感</summary>
      
    
    
    
    <category term="感悟" scheme="http://example.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>测试分类</title>
    <link href="http://example.com/2021/07/29/cat/"/>
    <id>http://example.com/2021/07/29/cat/</id>
    <published>2021-07-29T15:59:00.000Z</published>
    <updated>2021-08-04T02:23:48.390Z</updated>
    
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>anotest</title>
    <link href="http://example.com/2021/07/29/anotest/"/>
    <id>http://example.com/2021/07/29/anotest/</id>
    <published>2021-07-29T13:24:44.000Z</published>
    <updated>2021-08-04T01:52:09.153Z</updated>
    
    
    
    
    
    <category term="唱歌" scheme="http://example.com/tags/%E5%94%B1%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>firstpost</title>
    <link href="http://example.com/2021/07/28/firstpost/"/>
    <id>http://example.com/2021/07/28/firstpost/</id>
    <published>2021-07-28T12:05:25.000Z</published>
    <updated>2021-08-04T01:52:41.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world!"></a>Hello, world!</h2><p>here is my first post.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello, world!&quot;&gt;&lt;/a&gt;Hello, world!&lt;/h2&gt;&lt;p&gt;here is my first post.&lt;/p&gt;
</summary>
      
    
    
    
    <category term="篮球" scheme="http://example.com/categories/%E7%AF%AE%E7%90%83/"/>
    
    
  </entry>
  
</feed>
